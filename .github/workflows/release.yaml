name: 'Build and Release (PNPM Fixed)'

on:
  push:
    branches: [main, master]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'LICENSE'
  pull_request:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      version_increment:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

env:
  CARGO_TERM_COLOR: always

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      new_version: ${{ steps.version.outputs.new_version }}
      should_release: ${{ steps.version.outputs.should_release }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: |
          echo "PNPM version: $(pnpm --version)"
          echo "Node version: $(node --version)"
          
          # Check if lockfile exists and get version
          if [ -f "pnpm-lock.yaml" ]; then
            LOCKFILE_VERSION=$(grep 'lockfileVersion:' pnpm-lock.yaml | sed "s/lockfileVersion: '//g" | sed "s/'//g" || echo "unknown")
            echo "Lockfile version: $LOCKFILE_VERSION"
          fi
          
          # Install dependencies with fallback strategy
          if pnpm install --frozen-lockfile 2>/dev/null; then
            echo "✅ Installed with frozen lockfile"
          else
            echo "⚠️ Frozen lockfile incompatible, installing without frozen lockfile..."
            pnpm install --no-frozen-lockfile
            echo "✅ Dependencies installed successfully"
          fi

      - name: Determine version increment
        id: version
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Determine increment type
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            INCREMENT_TYPE="${{ github.event.inputs.version_increment }}"
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/master" ]]; then
            # Check commit messages for version hints
            COMMIT_MSG=$(git log -1 --pretty=%B)
            if [[ $COMMIT_MSG =~ \[major\] ]]; then
              INCREMENT_TYPE="major"
            elif [[ $COMMIT_MSG =~ \[minor\] ]]; then
              INCREMENT_TYPE="minor"
            else
              INCREMENT_TYPE="patch"
            fi
          else
            INCREMENT_TYPE="patch"
          fi
          
          echo "Increment type: $INCREMENT_TYPE"
          
          # Calculate new version
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          case $INCREMENT_TYPE in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"
          
          # Check if we should create a release (only on main/master pushes or manual trigger)
          SHOULD_RELEASE="false"
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]] || \
             [[ "${{ github.event_name }}" == "push" && ("${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/master") ]]; then
            SHOULD_RELEASE="true"
          fi
          
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "should_release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT

  update-version:
    needs: get-version
    if: needs.get-version.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: |
          echo "PNPM version: $(pnpm --version)"
          
          # Install dependencies with fallback strategy
          if pnpm install --frozen-lockfile 2>/dev/null; then
            echo "✅ Installed with frozen lockfile"
          else
            echo "⚠️ Frozen lockfile incompatible, installing without frozen lockfile..."
            pnpm install --no-frozen-lockfile
            echo "✅ Dependencies installed successfully"
          fi

      - name: Update package.json version
        run: |
          pnpm version ${{ needs.get-version.outputs.new_version }} --no-git-tag-version

      - name: Update Cargo.toml version
        run: |
          cd src-tauri
          sed -i 's/^version = ".*"/version = "${{ needs.get-version.outputs.new_version }}"/' Cargo.toml

      - name: Update Cargo.lock
        run: |
          cd src-tauri
          cargo check

      - name: Update tauri.conf.json version
        run: |
          pnpm dlx json -I -f src-tauri/tauri.conf.json -e "this.package.version='${{ needs.get-version.outputs.new_version }}'"

      - name: Commit version changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json pnpm-lock.yaml src-tauri/Cargo.toml src-tauri/Cargo.lock src-tauri/tauri.conf.json
          git commit -m "chore: bump version to ${{ needs.get-version.outputs.new_version }}" || exit 0
          git push

  build-and-release:
    needs: [get-version, update-version]
    if: needs.get-version.outputs.should_release == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'windows-latest'
            args: '--target x86_64-pc-windows-msvc'
            target: 'x86_64-pc-windows-msvc'
          - platform: 'windows-latest'
            args: '--target i686-pc-windows-msvc'
            target: 'i686-pc-windows-msvc'
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            target: 'aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            target: 'x86_64-apple-darwin'
          - platform: 'ubuntu-20.04'
            args: '--target x86_64-unknown-linux-gnu'
            target: 'x86_64-unknown-linux-gnu'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf libssl-dev

      - name: Install frontend dependencies
        run: |
          echo "PNPM version: $(pnpm --version)"
          echo "Platform: ${{ matrix.platform }}"
          
          # Install dependencies with fallback strategy
          if pnpm install --frozen-lockfile 2>/dev/null; then
            echo "✅ Installed with frozen lockfile"
          else
            echo "⚠️ Frozen lockfile incompatible, installing without frozen lockfile..."
            pnpm install --no-frozen-lockfile
            echo "✅ Dependencies installed successfully"
          fi

      - name: Build frontend
        run: pnpm run build

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: v${{ needs.get-version.outputs.new_version }}
          releaseName: 'VRChat Photo Uploader v${{ needs.get-version.outputs.new_version }}'
          releaseBody: |
            ## What's Changed
            
            ### Version ${{ needs.get-version.outputs.new_version }}
            
            #### Installation
            - **Windows**: Download the `.msi` installer for a guided installation, or the `.exe` for a portable experience
            - **macOS**: Download the `.dmg` file for Apple Silicon (M1/M2) or Intel processors
            - **Linux**: Download the `.AppImage` for a portable experience or the `.deb` for Debian/Ubuntu systems
            
            #### Features
            - Upload VRChat screenshots to Discord with metadata
            - Automatic image grouping by world and players
            - Image compression and optimization
            - Progress tracking and retry functionality
            - Forum channel support with threading
            
            #### System Requirements
            - **Windows**: Windows 10 or later
            - **macOS**: macOS 10.15 or later
            - **Linux**: Any modern distribution with GTK 3.24+
            
            ---
            
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ needs.get-version.outputs.version }}...v${{ needs.get-version.outputs.new_version }}
          releaseDraft: false
          prerelease: false
          args: ${{ matrix.args }}

  build-test:
    needs: get-version
    if: needs.get-version.outputs.should_release == 'false'
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install frontend dependencies
        run: |
          echo "PNPM version: $(pnpm --version)"
          
          # Install dependencies with fallback strategy
          if (pnpm install --frozen-lockfile) {
            Write-Host "✅ Installed with frozen lockfile"
          } else {
            Write-Host "⚠️ Frozen lockfile incompatible, installing without frozen lockfile..."
            pnpm install --no-frozen-lockfile
            Write-Host "✅ Dependencies installed successfully"
          }

      - name: Build frontend
        run: pnpm run build

      - name: Test Tauri build
        run: |
          cd src-tauri
          cargo build --release

      - name: Run tests (if available)
        run: |
          # Try to run frontend tests
          try {
            pnpm test --run
          } catch {
            Write-Host "No frontend tests found or test command failed"
          }
          # Run Rust tests
          cd src-tauri
          cargo test