name: 'Manual Release'

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.2.3)'
        required: true
        type: string
      release_notes:
        description: 'Release notes (optional)'
        required: false
        type: string
        default: ''
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false
      draft:
        description: 'Create as draft release'
        required: false
        type: boolean
        default: false

env:
  CARGO_TERM_COLOR: always

jobs:
  validate-and-prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.validate.outputs.version }}
      release_notes: ${{ steps.validate.outputs.release_notes }}
    steps:
      - uses: actions/checkout@v4

      - name: Validate version format
        id: validate
        run: |
          VERSION="${{ github.event.inputs.version }}"
          
          # Validate semantic version format
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Invalid version format: $VERSION"
            echo "Version must be in format: X.Y.Z (e.g., 1.2.3)"
            exit 1
          fi
          
          # Check if tag already exists
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "‚ùå Tag v$VERSION already exists"
            exit 1
          fi
          
          echo "‚úÖ Version $VERSION is valid"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Prepare release notes
          RELEASE_NOTES="${{ github.event.inputs.release_notes }}"
          if [[ -z "$RELEASE_NOTES" ]]; then
            RELEASE_NOTES="Manual release v$VERSION"
          fi
          
          # Escape for JSON
          RELEASE_NOTES=$(echo "$RELEASE_NOTES" | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')
          echo "release_notes=$RELEASE_NOTES" >> $GITHUB_OUTPUT

  update-version-manual:
    needs: validate-and-prepare
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: npm ci

      - name: Update all version files
        run: |
          VERSION="${{ needs.validate-and-prepare.outputs.version }}"
          
          # Update package.json
          pnpm version $VERSION --no-git-tag-version
          
          # Update Cargo.toml
          cd src-tauri
          sed -i 's/^version = ".*"/version = "'$VERSION'"/' Cargo.toml
          
          # Update Cargo.lock
          cargo check
          
          # Update tauri.conf.json
          cd ..
          pnpm dlx json -I -f src-tauri/tauri.conf.json -e "this.package.version='$VERSION'"

      - name: Commit version changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json pnpm-lock.yaml src-tauri/Cargo.toml src-tauri/Cargo.lock src-tauri/tauri.conf.json
          git commit -m "chore: manual release v${{ needs.validate-and-prepare.outputs.version }}"
          git push

  build-manual-release:
    needs: [validate-and-prepare, update-version-manual]
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'windows-latest'
            args: '--target x86_64-pc-windows-msvc'
            target: 'x86_64-pc-windows-msvc'
            arch: 'x64'
          - platform: 'windows-latest'
            args: '--target i686-pc-windows-msvc'
            target: 'i686-pc-windows-msvc'
            arch: 'x86'
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            target: 'aarch64-apple-darwin'
            arch: 'arm64'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            target: 'x86_64-apple-darwin'
            arch: 'x64'
          - platform: 'ubuntu-20.04'
            args: '--target x86_64-unknown-linux-gnu'
            target: 'x86_64-unknown-linux-gnu'
            arch: 'x64'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf libssl-dev

      - name: Install frontend dependencies
        run: npm ci

      - name: Build frontend
        run: pnpm run build

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: v${{ needs.validate-and-prepare.outputs.version }}
          releaseName: 'VRChat Photo Uploader v${{ needs.validate-and-prepare.outputs.version }}'
          releaseBody: |
            ## VRChat Photo Uploader v${{ needs.validate-and-prepare.outputs.version }}
            
            ${{ needs.validate-and-prepare.outputs.release_notes }}
            
            ### Installation Instructions
            
            #### Windows
            - **Recommended**: Download the `.msi` installer for automatic installation and updates
            - **Alternative**: Download the `.exe` for a portable experience
            - **System Requirements**: Windows 10 or later (x64 or x86)
            
            #### macOS
            - **Apple Silicon (M1/M2)**: Download the `aarch64.dmg` file
            - **Intel Processors**: Download the `x64.dmg` file
            - **System Requirements**: macOS 10.15 (Catalina) or later
            
            #### Linux
            - **AppImage**: Download the `.AppImage` for a portable experience
            - **Debian/Ubuntu**: Download the `.deb` package
            - **System Requirements**: Any modern distribution with GTK 3.24+
            
            ### Key Features
            - üì∏ Upload VRChat screenshots to Discord with embedded metadata
            - üåç Automatic grouping by world and players for organized posting
            - üóúÔ∏è Smart image compression to stay under Discord's limits
            - üìä Real-time progress tracking with retry functionality
            - üßµ Forum channel support with automatic thread creation
            - üîí Secure file handling and validation
            
            ### Support
            - Report issues: [GitHub Issues](https://github.com/${{ github.repository }}/issues)
            - Documentation: [README](https://github.com/${{ github.repository }}#readme)
            
            ---
            
            **Architecture Support:**
            - Windows: x64, x86
            - macOS: Apple Silicon (M1/M2), Intel
            - Linux: x64
          releaseDraft: ${{ github.event.inputs.draft == 'true' }}
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}
          args: ${{ matrix.args }}